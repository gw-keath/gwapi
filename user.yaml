openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API documentation for managing users in the system.

paths:
  /api/users:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: Create a new user
      description: Create a new user with name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors

  /api/users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieve a specific user by their ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update an existing user
      description: Update user details by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete a user by ID
      description: Remove a user from the system by ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found

  /api/register:
    post:
      summary: Register a new user
      description: Create a new user with name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserWithConfirmation'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation errors
        '409':
          description: User with this email already exists

  /api/login:
    post:
      summary: User login
      description: Authenticate a user and return an access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: User logged in successfully, returns access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
        '401':
          description: Unauthorized - Invalid credentials

  /api/logout:
    post:
      summary: User logout
      description: Logout the authenticated user and invalidate the token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
        '401':
          description: Unauthorized - Invalid or expired token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NewUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password

    NewUserWithConfirmation:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
      required:
        - name
        - email
        - password
        - password_confirmation

    UpdateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    LoginUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
